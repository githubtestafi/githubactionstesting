# Workflow pr-on-qa
name: Validate PR
on:
    pull_request:
      types: [opened, synchronize]
      branches: [ QA ]
      paths:
        - 'force-app/**'
#
permissions:
  security-events: write
  actions: read
  contents: 'read'

jobs:
    validate-pr-in-QA:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            - uses: actions/setup-node@v3
              with:
                node-version: '14'
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            - name: 'Read PR Body'
              env:
                PR_BODY: ${{github.event.pull_request.body}}
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk
            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner
            - name: 'SFDX_URL secret of QA org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt
            - name: 'Authenticate to QA Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
            - name: 'Scan code'
              run: |
                  cd changed-sources
                  sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
                  cd ..
            - name: Upload SARIF file
              uses: github/codeql-action/upload-sarif@v2
              with:
                sarif_file: changed-sources/apexScanResults.sarif

            # We do a check-only deploy and we only run the tests specified in the PR
            # If the env variable does not equal 'all', we know that there is a list of
            # tests that can be run test

            - name: 'Check-only deploy delta changes - run specified tests'
              if: ${{ env.APEX_TESTS != 'all' && env.APEX_TESTS != 'NoTestRun' }}
              run: |
                  echo ${{env.APEX_TESTS}}
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json

            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run Local tests'
              if: ${{ env.APEX_TESTS == 'all' }}
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json

            - name: 'Check-only deploy delta changes - No Test Run tests'
              if: ${{ env.APEX_TESTS == 'NoTestRun' }}
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel NoTestRun --json
            
            - name: 'Deploy destructive changes (if any)'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 

      Create-PR-UAT:
          needs: [validate-pr-in-QA]
          runs-on: ubuntu-latest
          if: ${{ github.actor != 'dependabot[bot]' }}
          steps:
             - name: create pull request
               run: gh pr create -B UAT -H GITHUB_REF --title 'Merge branch_to_merge into base_branch' --body 'Created by Github action'
               env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
